// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.0 DO NOT EDIT.
package api

const (
	Api_key_headerScopes = "api_key_header.Scopes"
)

// Defines values for SearchOverrideRuleMatch.
const (
	SearchOverrideRuleMatchContains SearchOverrideRuleMatch = "contains"

	SearchOverrideRuleMatchExact SearchOverrideRuleMatch = "exact"
)

// ApiKey defines model for ApiKey.
type ApiKey struct {
	// Embedded struct due to allOf(#/components/schemas/ApiKeySchema)
	ApiKeySchema `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Id          int64  `json:"id"`
	Value       string `json:"value"`
	ValuePrefix string `json:"value_prefix"`
}

// ApiKeySchema defines model for ApiKeySchema.
type ApiKeySchema struct {
	Actions     []string `json:"actions"`
	Collections []string `json:"collections"`
	Description string   `json:"description"`
	ExpiresAt   *int64   `json:"expires_at,omitempty"`
}

// ApiKeysResponse defines model for ApiKeysResponse.
type ApiKeysResponse struct {
	Keys []*ApiKey `json:"keys"`
}

// ApiResponse defines model for ApiResponse.
type ApiResponse struct {
	Message string `json:"message"`
}

// CollectionAlias defines model for CollectionAlias.
type CollectionAlias struct {
	// Name of the collection the alias mapped to
	CollectionName string `json:"collection_name"`

	// Name of the collection alias
	Name string `json:"name"`
}

// CollectionAliasSchema defines model for CollectionAliasSchema.
type CollectionAliasSchema struct {
	// Name of the collection you wish to map the alias to
	CollectionName string `json:"collection_name"`
}

// CollectionAliasesResponse defines model for CollectionAliasesResponse.
type CollectionAliasesResponse struct {
	Aliases []*CollectionAlias `json:"aliases"`
}

// CollectionResponse defines model for CollectionResponse.
type CollectionResponse struct {
	// Embedded struct due to allOf(#/components/schemas/CollectionSchema)
	CollectionSchema `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	// Timestamp of when the collection was created
	CreatedAt int64 `json:"created_at"`

	// Number of documents in the collection
	NumDocuments    int64 `json:"num_documents"`
	NumMemoryShards int64 `json:"num_memory_shards"`
}

// CollectionSchema defines model for CollectionSchema.
type CollectionSchema struct {
	// The name of an int32 / float field that determines the order in which the search results are ranked when a sort_by clause is not provided during searching. This field must indicate some kind of popularity.
	DefaultSortingField *string `json:"default_sorting_field,omitempty"`

	// A list of fields for querying, filtering and faceting
	Fields []Field `json:"fields"`

	// Name of the collection
	Name string `json:"name"`

	// List of symbols or special characters to be indexed.
	SymbolsToIndex []string `json:"symbols_to_index"`

	// List of symbols or special characters to be used for  splitting the text into individual words in addition to space and new-line characters.
	TokenSeparators []string `json:"token_separators"`
}

// Field defines model for Field.
type Field struct {
	Facet    *bool  `json:"facet,omitempty"`
	Index    *bool  `json:"index,omitempty"`
	Name     string `json:"name"`
	Optional *bool  `json:"optional,omitempty"`
	Type     string `json:"type"`
}

// HealthStatus defines model for HealthStatus.
type HealthStatus struct {
	Ok bool `json:"ok"`
}

// SearchGroupedHit defines model for SearchGroupedHit.
type SearchGroupedHit struct {
	GroupKey []string `json:"group_key"`

	// The documents that matched the search query
	Hits []SearchResultHit `json:"hits"`
}

// SearchHighlight defines model for SearchHighlight.
type SearchHighlight struct {
	Field string `json:"field"`

	// The indices property will be present only for string[] fields and will contain the corresponding indices of the snippets in the search field
	Indices       []int         `json:"indices"`
	MatchedTokens []interface{} `json:"matched_tokens"`

	// Present only for (non-array) string fields
	Snippet string `json:"snippet"`

	// Present only for (array) string[] fields
	Snippets []string `json:"snippets"`
}

// SearchOverride defines model for SearchOverride.
type SearchOverride struct {
	// Embedded struct due to allOf(#/components/schemas/SearchOverrideSchema)
	SearchOverrideSchema `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Id string `json:"id"`
}

// SearchOverrideExclude defines model for SearchOverrideExclude.
type SearchOverrideExclude struct {
	// document id that should be excluded from the search results.
	Id string `json:"id"`
}

// SearchOverrideInclude defines model for SearchOverrideInclude.
type SearchOverrideInclude struct {
	// document id that should be included
	Id string `json:"id"`

	// position number where document should be included in the search results
	Position int `json:"position"`
}

// SearchOverrideRule defines model for SearchOverrideRule.
type SearchOverrideRule struct {
	// Indicates whether the match on the query term should be `exact` or `contains`. If we want to match all queries that contained the word `apple`, we will use the `contains` match instead.
	Match SearchOverrideRuleMatch `json:"match"`

	// Indicates what search queries should be overridden
	Query string `json:"query"`
}

// Indicates whether the match on the query term should be `exact` or `contains`. If we want to match all queries that contained the word `apple`, we will use the `contains` match instead.
type SearchOverrideRuleMatch string

// SearchOverrideSchema defines model for SearchOverrideSchema.
type SearchOverrideSchema struct {
	// List of document `id`s that should be excluded from the search results.
	Excludes []SearchOverrideExclude `json:"excludes"`

	// A filter by clause that is applied to any search query that matches the override rule.
	FilterBy *string `json:"filter_by,omitempty"`

	// List of document `id`s that should be included in the search results with their corresponding `position`s.
	Includes []SearchOverrideInclude `json:"includes"`

	// Indicates whether search query tokens that exist in the override's rule should be removed from the search query.
	RemoveMatchedTokens *bool              `json:"remove_matched_tokens,omitempty"`
	Rule                SearchOverrideRule `json:"rule"`
}

// SearchOverridesResponse defines model for SearchOverridesResponse.
type SearchOverridesResponse struct {
	Overrides []*SearchOverride `json:"overrides"`
}

// SearchResult defines model for SearchResult.
type SearchResult struct {
	FacetCounts []int `json:"facet_counts"`

	// The number of documents found
	Found       int                `json:"found"`
	GroupedHits []SearchGroupedHit `json:"grouped_hits"`

	// The documents that matched the search query
	Hits []SearchResultHit `json:"hits"`

	// The search result page number
	Page          int `json:"page"`
	RequestParams struct {
		CollectionName string `json:"collection_name"`
		PerPage        int    `json:"per_page"`
		Q              string `json:"q"`
	} `json:"request_params"`

	// The number of milliseconds the search took
	SearchTimeMs int `json:"search_time_ms"`
}

// SearchResultHit defines model for SearchResultHit.
type SearchResultHit struct {
	// Can be any key-value pair
	Document map[string]interface{} `json:"document"`

	// Contains highlighted portions of the search fields
	Highlights []SearchHighlight `json:"highlights"`
	TextMatch  int64             `json:"text_match"`
}

// SearchSynonym defines model for SearchSynonym.
type SearchSynonym struct {
	// Embedded struct due to allOf(#/components/schemas/SearchSynonymSchema)
	SearchSynonymSchema `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Id string `json:"id"`
}

// SearchSynonymSchema defines model for SearchSynonymSchema.
type SearchSynonymSchema struct {
	// For 1-way synonyms, indicates the root word that words in the `synonyms` parameter map to.
	Root string `json:"root"`

	// Array of words that should be considered as synonyms.
	Synonyms []string `json:"synonyms"`
}

// SearchSynonymsResponse defines model for SearchSynonymsResponse.
type SearchSynonymsResponse struct {
	Synonyms []*SearchSynonym `json:"synonyms"`
}

// SuccessStatus defines model for SuccessStatus.
type SuccessStatus struct {
	Success bool `json:"success"`
}

// UpsertAliasJSONBody defines parameters for UpsertAlias.
type UpsertAliasJSONBody CollectionAliasSchema

// CreateCollectionJSONBody defines parameters for CreateCollection.
type CreateCollectionJSONBody CollectionSchema

// DeleteDocumentsParams defines parameters for DeleteDocuments.
type DeleteDocumentsParams struct {
	FilterBy  *string `json:"filter_by,omitempty"`
	BatchSize *int    `json:"batch_size,omitempty"`
}

// IndexDocumentJSONBody defines parameters for IndexDocument.
type IndexDocumentJSONBody interface{}

// IndexDocumentParams defines parameters for IndexDocument.
type IndexDocumentParams struct {
	// Additional action to perform
	Action *IndexDocumentParamsAction `json:"action,omitempty"`
}

// IndexDocumentParamsAction defines parameters for IndexDocument.
type IndexDocumentParamsAction string

// ExportDocumentsParams defines parameters for ExportDocuments.
type ExportDocumentsParams struct {
	FilterBy      *string   `json:"filter_by,omitempty"`
	IncludeFields *[]string `json:"include_fields,omitempty"`
	ExcludeFields *[]string `json:"exclude_fields,omitempty"`
}

// ImportDocumentsParams defines parameters for ImportDocuments.
type ImportDocumentsParams struct {
	Action      *string                           `json:"action,omitempty"`
	BatchSize   *int                              `json:"batch_size,omitempty"`
	DirtyValues *ImportDocumentsParamsDirtyValues `json:"dirty_values,omitempty"`
}

// ImportDocumentsParamsDirtyValues defines parameters for ImportDocuments.
type ImportDocumentsParamsDirtyValues string

// SearchCollectionParams defines parameters for SearchCollection.
type SearchCollectionParams struct {
	GroupBy                 *[]string    `json:"group_by,omitempty"`
	ExcludeFields           *[]string    `json:"exclude_fields,omitempty"`
	HighlightFullFields     *[]string    `json:"highlight_full_fields,omitempty"`
	HighlightStartTag       *string      `json:"highlight_start_tag,omitempty"`
	UseCache                *bool        `json:"use_cache,omitempty"`
	QueryByWeights          *[]string    `json:"query_by_weights,omitempty"`
	MaxFacetValues          *int         `json:"max_facet_values,omitempty"`
	FacetQuery              *string      `json:"facet_query,omitempty"`
	DropTokensThreshold     *int         `json:"drop_tokens_threshold,omitempty"`
	PreSegmentedQuery       *bool        `json:"pre_segmented_query,omitempty"`
	QueryBy                 []string     `json:"query_by"`
	NumTypos                *int         `json:"num_typos,omitempty"`
	Page                    *int         `json:"page,omitempty"`
	FacetBy                 *[]string    `json:"facet_by,omitempty"`
	GroupLimit              *int         `json:"group_limit,omitempty"`
	IncludeFields           *[]string    `json:"include_fields,omitempty"`
	HighlightEndTag         *string      `json:"highlight_end_tag,omitempty"`
	EnableOverrides         *bool        `json:"enable_overrides,omitempty"`
	MaxHits                 *interface{} `json:"max_hits,omitempty"`
	Prefix                  *[]bool      `json:"prefix,omitempty"`
	SortBy                  *[]string    `json:"sort_by,omitempty"`
	PinnedHits              *[]string    `json:"pinned_hits,omitempty"`
	HiddenHits              *[]string    `json:"hidden_hits,omitempty"`
	PerPage                 *int         `json:"per_page,omitempty"`
	PrioritizeExactMatch    *bool        `json:"prioritize_exact_match,omitempty"`
	TypoTokensThreshold     *int         `json:"typo_tokens_threshold,omitempty"`
	CacheTtl                *int         `json:"cache_ttl,omitempty"`
	MinLen2typo             *int         `json:"min_len_2typo,omitempty"`
	Q                       string       `json:"q"`
	FilterBy                *string      `json:"filter_by,omitempty"`
	HighlightAffixNumTokens *int         `json:"highlight_affix_num_tokens,omitempty"`
	SnippetThreshold        *int         `json:"snippet_threshold,omitempty"`
	HighlightFields         *[]string    `json:"highlight_fields,omitempty"`
	ExhaustiveSearch        *bool        `json:"exhaustive_search,omitempty"`
	SearchCutoffMs          *int         `json:"search_cutoff_ms,omitempty"`
	MinLen1typo             *int         `json:"min_len_1typo,omitempty"`
}

// UpdateDocumentJSONBody defines parameters for UpdateDocument.
type UpdateDocumentJSONBody interface{}

// UpsertSearchOverrideJSONBody defines parameters for UpsertSearchOverride.
type UpsertSearchOverrideJSONBody SearchOverrideSchema

// UpsertSearchSynonymJSONBody defines parameters for UpsertSearchSynonym.
type UpsertSearchSynonymJSONBody SearchSynonymSchema

// CreateKeyJSONBody defines parameters for CreateKey.
type CreateKeyJSONBody ApiKeySchema

// TakeSnapshotParams defines parameters for TakeSnapshot.
type TakeSnapshotParams struct {
	// The directory on the server where the snapshot should be saved.
	SnapshotPath string `json:"snapshot_path"`
}

// UpsertAliasJSONRequestBody defines body for UpsertAlias for application/json ContentType.
type UpsertAliasJSONRequestBody UpsertAliasJSONBody

// CreateCollectionJSONRequestBody defines body for CreateCollection for application/json ContentType.
type CreateCollectionJSONRequestBody CreateCollectionJSONBody

// IndexDocumentJSONRequestBody defines body for IndexDocument for application/json ContentType.
type IndexDocumentJSONRequestBody IndexDocumentJSONBody

// UpdateDocumentJSONRequestBody defines body for UpdateDocument for application/json ContentType.
type UpdateDocumentJSONRequestBody UpdateDocumentJSONBody

// UpsertSearchOverrideJSONRequestBody defines body for UpsertSearchOverride for application/json ContentType.
type UpsertSearchOverrideJSONRequestBody UpsertSearchOverrideJSONBody

// UpsertSearchSynonymJSONRequestBody defines body for UpsertSearchSynonym for application/json ContentType.
type UpsertSearchSynonymJSONRequestBody UpsertSearchSynonymJSONBody

// CreateKeyJSONRequestBody defines body for CreateKey for application/json ContentType.
type CreateKeyJSONRequestBody CreateKeyJSONBody
