// Code generated by MockGen. DO NOT EDIT.
// Source: client_gen.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	api "github.com/v-byte-cpu/typesense-go/typesense/api"
	io "io"
	http "net/http"
	reflect "reflect"
)

// MockHttpRequestDoer is a mock of HttpRequestDoer interface
type MockHttpRequestDoer struct {
	ctrl     *gomock.Controller
	recorder *MockHttpRequestDoerMockRecorder
}

// MockHttpRequestDoerMockRecorder is the mock recorder for MockHttpRequestDoer
type MockHttpRequestDoerMockRecorder struct {
	mock *MockHttpRequestDoer
}

// NewMockHttpRequestDoer creates a new mock instance
func NewMockHttpRequestDoer(ctrl *gomock.Controller) *MockHttpRequestDoer {
	mock := &MockHttpRequestDoer{ctrl: ctrl}
	mock.recorder = &MockHttpRequestDoerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockHttpRequestDoer) EXPECT() *MockHttpRequestDoerMockRecorder {
	return m.recorder
}

// Do mocks base method
func (m *MockHttpRequestDoer) Do(req *http.Request) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Do", req)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Do indicates an expected call of Do
func (mr *MockHttpRequestDoerMockRecorder) Do(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Do", reflect.TypeOf((*MockHttpRequestDoer)(nil).Do), req)
}

// MockClientInterface is a mock of ClientInterface interface
type MockClientInterface struct {
	ctrl     *gomock.Controller
	recorder *MockClientInterfaceMockRecorder
}

// MockClientInterfaceMockRecorder is the mock recorder for MockClientInterface
type MockClientInterfaceMockRecorder struct {
	mock *MockClientInterface
}

// NewMockClientInterface creates a new mock instance
func NewMockClientInterface(ctrl *gomock.Controller) *MockClientInterface {
	mock := &MockClientInterface{ctrl: ctrl}
	mock.recorder = &MockClientInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockClientInterface) EXPECT() *MockClientInterfaceMockRecorder {
	return m.recorder
}

// GetAliases mocks base method
func (m *MockClientInterface) GetAliases(ctx context.Context) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAliases", ctx)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAliases indicates an expected call of GetAliases
func (mr *MockClientInterfaceMockRecorder) GetAliases(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAliases", reflect.TypeOf((*MockClientInterface)(nil).GetAliases), ctx)
}

// DeleteAlias mocks base method
func (m *MockClientInterface) DeleteAlias(ctx context.Context, aliasName string) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAlias", ctx, aliasName)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAlias indicates an expected call of DeleteAlias
func (mr *MockClientInterfaceMockRecorder) DeleteAlias(ctx, aliasName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAlias", reflect.TypeOf((*MockClientInterface)(nil).DeleteAlias), ctx, aliasName)
}

// GetAlias mocks base method
func (m *MockClientInterface) GetAlias(ctx context.Context, aliasName string) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAlias", ctx, aliasName)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAlias indicates an expected call of GetAlias
func (mr *MockClientInterfaceMockRecorder) GetAlias(ctx, aliasName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAlias", reflect.TypeOf((*MockClientInterface)(nil).GetAlias), ctx, aliasName)
}

// UpsertAliasWithBody mocks base method
func (m *MockClientInterface) UpsertAliasWithBody(ctx context.Context, aliasName, contentType string, body io.Reader) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertAliasWithBody", ctx, aliasName, contentType, body)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpsertAliasWithBody indicates an expected call of UpsertAliasWithBody
func (mr *MockClientInterfaceMockRecorder) UpsertAliasWithBody(ctx, aliasName, contentType, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertAliasWithBody", reflect.TypeOf((*MockClientInterface)(nil).UpsertAliasWithBody), ctx, aliasName, contentType, body)
}

// UpsertAlias mocks base method
func (m *MockClientInterface) UpsertAlias(ctx context.Context, aliasName string, body api.UpsertAliasJSONRequestBody) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertAlias", ctx, aliasName, body)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpsertAlias indicates an expected call of UpsertAlias
func (mr *MockClientInterfaceMockRecorder) UpsertAlias(ctx, aliasName, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertAlias", reflect.TypeOf((*MockClientInterface)(nil).UpsertAlias), ctx, aliasName, body)
}

// GetCollections mocks base method
func (m *MockClientInterface) GetCollections(ctx context.Context) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCollections", ctx)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCollections indicates an expected call of GetCollections
func (mr *MockClientInterfaceMockRecorder) GetCollections(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCollections", reflect.TypeOf((*MockClientInterface)(nil).GetCollections), ctx)
}

// CreateCollectionWithBody mocks base method
func (m *MockClientInterface) CreateCollectionWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCollectionWithBody", ctx, contentType, body)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCollectionWithBody indicates an expected call of CreateCollectionWithBody
func (mr *MockClientInterfaceMockRecorder) CreateCollectionWithBody(ctx, contentType, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCollectionWithBody", reflect.TypeOf((*MockClientInterface)(nil).CreateCollectionWithBody), ctx, contentType, body)
}

// CreateCollection mocks base method
func (m *MockClientInterface) CreateCollection(ctx context.Context, body api.CreateCollectionJSONRequestBody) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCollection", ctx, body)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCollection indicates an expected call of CreateCollection
func (mr *MockClientInterfaceMockRecorder) CreateCollection(ctx, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCollection", reflect.TypeOf((*MockClientInterface)(nil).CreateCollection), ctx, body)
}

// DeleteCollection mocks base method
func (m *MockClientInterface) DeleteCollection(ctx context.Context, collectionName string) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCollection", ctx, collectionName)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteCollection indicates an expected call of DeleteCollection
func (mr *MockClientInterfaceMockRecorder) DeleteCollection(ctx, collectionName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCollection", reflect.TypeOf((*MockClientInterface)(nil).DeleteCollection), ctx, collectionName)
}

// GetCollection mocks base method
func (m *MockClientInterface) GetCollection(ctx context.Context, collectionName string) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCollection", ctx, collectionName)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCollection indicates an expected call of GetCollection
func (mr *MockClientInterfaceMockRecorder) GetCollection(ctx, collectionName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCollection", reflect.TypeOf((*MockClientInterface)(nil).GetCollection), ctx, collectionName)
}

// DeleteDocuments mocks base method
func (m *MockClientInterface) DeleteDocuments(ctx context.Context, collectionName string, params *api.DeleteDocumentsParams) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDocuments", ctx, collectionName, params)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteDocuments indicates an expected call of DeleteDocuments
func (mr *MockClientInterfaceMockRecorder) DeleteDocuments(ctx, collectionName, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDocuments", reflect.TypeOf((*MockClientInterface)(nil).DeleteDocuments), ctx, collectionName, params)
}

// IndexDocumentWithBody mocks base method
func (m *MockClientInterface) IndexDocumentWithBody(ctx context.Context, collectionName string, params *api.IndexDocumentParams, contentType string, body io.Reader) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IndexDocumentWithBody", ctx, collectionName, params, contentType, body)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IndexDocumentWithBody indicates an expected call of IndexDocumentWithBody
func (mr *MockClientInterfaceMockRecorder) IndexDocumentWithBody(ctx, collectionName, params, contentType, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IndexDocumentWithBody", reflect.TypeOf((*MockClientInterface)(nil).IndexDocumentWithBody), ctx, collectionName, params, contentType, body)
}

// IndexDocument mocks base method
func (m *MockClientInterface) IndexDocument(ctx context.Context, collectionName string, params *api.IndexDocumentParams, body api.IndexDocumentJSONRequestBody) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IndexDocument", ctx, collectionName, params, body)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IndexDocument indicates an expected call of IndexDocument
func (mr *MockClientInterfaceMockRecorder) IndexDocument(ctx, collectionName, params, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IndexDocument", reflect.TypeOf((*MockClientInterface)(nil).IndexDocument), ctx, collectionName, params, body)
}

// ExportCollection mocks base method
func (m *MockClientInterface) ExportCollection(ctx context.Context, collectionName string) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExportCollection", ctx, collectionName)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExportCollection indicates an expected call of ExportCollection
func (mr *MockClientInterfaceMockRecorder) ExportCollection(ctx, collectionName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExportCollection", reflect.TypeOf((*MockClientInterface)(nil).ExportCollection), ctx, collectionName)
}

// ImportCollectionWithBody mocks base method
func (m *MockClientInterface) ImportCollectionWithBody(ctx context.Context, collectionName string, params *api.ImportCollectionParams, contentType string, body io.Reader) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ImportCollectionWithBody", ctx, collectionName, params, contentType, body)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ImportCollectionWithBody indicates an expected call of ImportCollectionWithBody
func (mr *MockClientInterfaceMockRecorder) ImportCollectionWithBody(ctx, collectionName, params, contentType, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImportCollectionWithBody", reflect.TypeOf((*MockClientInterface)(nil).ImportCollectionWithBody), ctx, collectionName, params, contentType, body)
}

// SearchCollection mocks base method
func (m *MockClientInterface) SearchCollection(ctx context.Context, collectionName string, params *api.SearchCollectionParams) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchCollection", ctx, collectionName, params)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchCollection indicates an expected call of SearchCollection
func (mr *MockClientInterfaceMockRecorder) SearchCollection(ctx, collectionName, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchCollection", reflect.TypeOf((*MockClientInterface)(nil).SearchCollection), ctx, collectionName, params)
}

// DeleteDocument mocks base method
func (m *MockClientInterface) DeleteDocument(ctx context.Context, collectionName, documentId string) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDocument", ctx, collectionName, documentId)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteDocument indicates an expected call of DeleteDocument
func (mr *MockClientInterfaceMockRecorder) DeleteDocument(ctx, collectionName, documentId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDocument", reflect.TypeOf((*MockClientInterface)(nil).DeleteDocument), ctx, collectionName, documentId)
}

// GetDocument mocks base method
func (m *MockClientInterface) GetDocument(ctx context.Context, collectionName, documentId string) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDocument", ctx, collectionName, documentId)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDocument indicates an expected call of GetDocument
func (mr *MockClientInterfaceMockRecorder) GetDocument(ctx, collectionName, documentId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDocument", reflect.TypeOf((*MockClientInterface)(nil).GetDocument), ctx, collectionName, documentId)
}

// UpdateDocumentWithBody mocks base method
func (m *MockClientInterface) UpdateDocumentWithBody(ctx context.Context, collectionName, documentId, contentType string, body io.Reader) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDocumentWithBody", ctx, collectionName, documentId, contentType, body)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateDocumentWithBody indicates an expected call of UpdateDocumentWithBody
func (mr *MockClientInterfaceMockRecorder) UpdateDocumentWithBody(ctx, collectionName, documentId, contentType, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDocumentWithBody", reflect.TypeOf((*MockClientInterface)(nil).UpdateDocumentWithBody), ctx, collectionName, documentId, contentType, body)
}

// UpdateDocument mocks base method
func (m *MockClientInterface) UpdateDocument(ctx context.Context, collectionName, documentId string, body api.UpdateDocumentJSONRequestBody) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDocument", ctx, collectionName, documentId, body)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateDocument indicates an expected call of UpdateDocument
func (mr *MockClientInterfaceMockRecorder) UpdateDocument(ctx, collectionName, documentId, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDocument", reflect.TypeOf((*MockClientInterface)(nil).UpdateDocument), ctx, collectionName, documentId, body)
}

// DeleteSearchOverride mocks base method
func (m *MockClientInterface) DeleteSearchOverride(ctx context.Context, collectionName, overrideId string) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSearchOverride", ctx, collectionName, overrideId)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSearchOverride indicates an expected call of DeleteSearchOverride
func (mr *MockClientInterfaceMockRecorder) DeleteSearchOverride(ctx, collectionName, overrideId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSearchOverride", reflect.TypeOf((*MockClientInterface)(nil).DeleteSearchOverride), ctx, collectionName, overrideId)
}

// UpsertSearchOverrideWithBody mocks base method
func (m *MockClientInterface) UpsertSearchOverrideWithBody(ctx context.Context, collectionName, overrideId, contentType string, body io.Reader) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertSearchOverrideWithBody", ctx, collectionName, overrideId, contentType, body)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpsertSearchOverrideWithBody indicates an expected call of UpsertSearchOverrideWithBody
func (mr *MockClientInterfaceMockRecorder) UpsertSearchOverrideWithBody(ctx, collectionName, overrideId, contentType, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertSearchOverrideWithBody", reflect.TypeOf((*MockClientInterface)(nil).UpsertSearchOverrideWithBody), ctx, collectionName, overrideId, contentType, body)
}

// UpsertSearchOverride mocks base method
func (m *MockClientInterface) UpsertSearchOverride(ctx context.Context, collectionName, overrideId string, body api.UpsertSearchOverrideJSONRequestBody) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertSearchOverride", ctx, collectionName, overrideId, body)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpsertSearchOverride indicates an expected call of UpsertSearchOverride
func (mr *MockClientInterfaceMockRecorder) UpsertSearchOverride(ctx, collectionName, overrideId, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertSearchOverride", reflect.TypeOf((*MockClientInterface)(nil).UpsertSearchOverride), ctx, collectionName, overrideId, body)
}

// Debug mocks base method
func (m *MockClientInterface) Debug(ctx context.Context) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Debug", ctx)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Debug indicates an expected call of Debug
func (mr *MockClientInterfaceMockRecorder) Debug(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Debug", reflect.TypeOf((*MockClientInterface)(nil).Debug), ctx)
}

// Health mocks base method
func (m *MockClientInterface) Health(ctx context.Context) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Health", ctx)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Health indicates an expected call of Health
func (mr *MockClientInterfaceMockRecorder) Health(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Health", reflect.TypeOf((*MockClientInterface)(nil).Health), ctx)
}

// ListKeys mocks base method
func (m *MockClientInterface) ListKeys(ctx context.Context) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListKeys", ctx)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListKeys indicates an expected call of ListKeys
func (mr *MockClientInterfaceMockRecorder) ListKeys(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListKeys", reflect.TypeOf((*MockClientInterface)(nil).ListKeys), ctx)
}

// CreateKeyWithBody mocks base method
func (m *MockClientInterface) CreateKeyWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateKeyWithBody", ctx, contentType, body)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateKeyWithBody indicates an expected call of CreateKeyWithBody
func (mr *MockClientInterfaceMockRecorder) CreateKeyWithBody(ctx, contentType, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateKeyWithBody", reflect.TypeOf((*MockClientInterface)(nil).CreateKeyWithBody), ctx, contentType, body)
}

// CreateKey mocks base method
func (m *MockClientInterface) CreateKey(ctx context.Context, body api.CreateKeyJSONRequestBody) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateKey", ctx, body)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateKey indicates an expected call of CreateKey
func (mr *MockClientInterfaceMockRecorder) CreateKey(ctx, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateKey", reflect.TypeOf((*MockClientInterface)(nil).CreateKey), ctx, body)
}

// DeleteKey mocks base method
func (m *MockClientInterface) DeleteKey(ctx context.Context, keyId string) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteKey", ctx, keyId)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteKey indicates an expected call of DeleteKey
func (mr *MockClientInterfaceMockRecorder) DeleteKey(ctx, keyId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteKey", reflect.TypeOf((*MockClientInterface)(nil).DeleteKey), ctx, keyId)
}

// GetKey mocks base method
func (m *MockClientInterface) GetKey(ctx context.Context, keyId string) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetKey", ctx, keyId)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetKey indicates an expected call of GetKey
func (mr *MockClientInterfaceMockRecorder) GetKey(ctx, keyId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKey", reflect.TypeOf((*MockClientInterface)(nil).GetKey), ctx, keyId)
}

// MockClientWithResponsesInterface is a mock of ClientWithResponsesInterface interface
type MockClientWithResponsesInterface struct {
	ctrl     *gomock.Controller
	recorder *MockClientWithResponsesInterfaceMockRecorder
}

// MockClientWithResponsesInterfaceMockRecorder is the mock recorder for MockClientWithResponsesInterface
type MockClientWithResponsesInterfaceMockRecorder struct {
	mock *MockClientWithResponsesInterface
}

// NewMockClientWithResponsesInterface creates a new mock instance
func NewMockClientWithResponsesInterface(ctrl *gomock.Controller) *MockClientWithResponsesInterface {
	mock := &MockClientWithResponsesInterface{ctrl: ctrl}
	mock.recorder = &MockClientWithResponsesInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockClientWithResponsesInterface) EXPECT() *MockClientWithResponsesInterfaceMockRecorder {
	return m.recorder
}

// GetAliasesWithResponse mocks base method
func (m *MockClientWithResponsesInterface) GetAliasesWithResponse(ctx context.Context) (*api.GetAliasesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAliasesWithResponse", ctx)
	ret0, _ := ret[0].(*api.GetAliasesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAliasesWithResponse indicates an expected call of GetAliasesWithResponse
func (mr *MockClientWithResponsesInterfaceMockRecorder) GetAliasesWithResponse(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAliasesWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).GetAliasesWithResponse), ctx)
}

// DeleteAliasWithResponse mocks base method
func (m *MockClientWithResponsesInterface) DeleteAliasWithResponse(ctx context.Context, aliasName string) (*api.DeleteAliasResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAliasWithResponse", ctx, aliasName)
	ret0, _ := ret[0].(*api.DeleteAliasResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAliasWithResponse indicates an expected call of DeleteAliasWithResponse
func (mr *MockClientWithResponsesInterfaceMockRecorder) DeleteAliasWithResponse(ctx, aliasName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAliasWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).DeleteAliasWithResponse), ctx, aliasName)
}

// GetAliasWithResponse mocks base method
func (m *MockClientWithResponsesInterface) GetAliasWithResponse(ctx context.Context, aliasName string) (*api.GetAliasResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAliasWithResponse", ctx, aliasName)
	ret0, _ := ret[0].(*api.GetAliasResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAliasWithResponse indicates an expected call of GetAliasWithResponse
func (mr *MockClientWithResponsesInterfaceMockRecorder) GetAliasWithResponse(ctx, aliasName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAliasWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).GetAliasWithResponse), ctx, aliasName)
}

// UpsertAliasWithBodyWithResponse mocks base method
func (m *MockClientWithResponsesInterface) UpsertAliasWithBodyWithResponse(ctx context.Context, aliasName, contentType string, body io.Reader) (*api.UpsertAliasResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertAliasWithBodyWithResponse", ctx, aliasName, contentType, body)
	ret0, _ := ret[0].(*api.UpsertAliasResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpsertAliasWithBodyWithResponse indicates an expected call of UpsertAliasWithBodyWithResponse
func (mr *MockClientWithResponsesInterfaceMockRecorder) UpsertAliasWithBodyWithResponse(ctx, aliasName, contentType, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertAliasWithBodyWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).UpsertAliasWithBodyWithResponse), ctx, aliasName, contentType, body)
}

// UpsertAliasWithResponse mocks base method
func (m *MockClientWithResponsesInterface) UpsertAliasWithResponse(ctx context.Context, aliasName string, body api.UpsertAliasJSONRequestBody) (*api.UpsertAliasResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertAliasWithResponse", ctx, aliasName, body)
	ret0, _ := ret[0].(*api.UpsertAliasResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpsertAliasWithResponse indicates an expected call of UpsertAliasWithResponse
func (mr *MockClientWithResponsesInterfaceMockRecorder) UpsertAliasWithResponse(ctx, aliasName, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertAliasWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).UpsertAliasWithResponse), ctx, aliasName, body)
}

// GetCollectionsWithResponse mocks base method
func (m *MockClientWithResponsesInterface) GetCollectionsWithResponse(ctx context.Context) (*api.GetCollectionsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCollectionsWithResponse", ctx)
	ret0, _ := ret[0].(*api.GetCollectionsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCollectionsWithResponse indicates an expected call of GetCollectionsWithResponse
func (mr *MockClientWithResponsesInterfaceMockRecorder) GetCollectionsWithResponse(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCollectionsWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).GetCollectionsWithResponse), ctx)
}

// CreateCollectionWithBodyWithResponse mocks base method
func (m *MockClientWithResponsesInterface) CreateCollectionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*api.CreateCollectionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCollectionWithBodyWithResponse", ctx, contentType, body)
	ret0, _ := ret[0].(*api.CreateCollectionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCollectionWithBodyWithResponse indicates an expected call of CreateCollectionWithBodyWithResponse
func (mr *MockClientWithResponsesInterfaceMockRecorder) CreateCollectionWithBodyWithResponse(ctx, contentType, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCollectionWithBodyWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).CreateCollectionWithBodyWithResponse), ctx, contentType, body)
}

// CreateCollectionWithResponse mocks base method
func (m *MockClientWithResponsesInterface) CreateCollectionWithResponse(ctx context.Context, body api.CreateCollectionJSONRequestBody) (*api.CreateCollectionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCollectionWithResponse", ctx, body)
	ret0, _ := ret[0].(*api.CreateCollectionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCollectionWithResponse indicates an expected call of CreateCollectionWithResponse
func (mr *MockClientWithResponsesInterfaceMockRecorder) CreateCollectionWithResponse(ctx, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCollectionWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).CreateCollectionWithResponse), ctx, body)
}

// DeleteCollectionWithResponse mocks base method
func (m *MockClientWithResponsesInterface) DeleteCollectionWithResponse(ctx context.Context, collectionName string) (*api.DeleteCollectionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCollectionWithResponse", ctx, collectionName)
	ret0, _ := ret[0].(*api.DeleteCollectionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteCollectionWithResponse indicates an expected call of DeleteCollectionWithResponse
func (mr *MockClientWithResponsesInterfaceMockRecorder) DeleteCollectionWithResponse(ctx, collectionName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCollectionWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).DeleteCollectionWithResponse), ctx, collectionName)
}

// GetCollectionWithResponse mocks base method
func (m *MockClientWithResponsesInterface) GetCollectionWithResponse(ctx context.Context, collectionName string) (*api.GetCollectionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCollectionWithResponse", ctx, collectionName)
	ret0, _ := ret[0].(*api.GetCollectionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCollectionWithResponse indicates an expected call of GetCollectionWithResponse
func (mr *MockClientWithResponsesInterfaceMockRecorder) GetCollectionWithResponse(ctx, collectionName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCollectionWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).GetCollectionWithResponse), ctx, collectionName)
}

// DeleteDocumentsWithResponse mocks base method
func (m *MockClientWithResponsesInterface) DeleteDocumentsWithResponse(ctx context.Context, collectionName string, params *api.DeleteDocumentsParams) (*api.DeleteDocumentsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDocumentsWithResponse", ctx, collectionName, params)
	ret0, _ := ret[0].(*api.DeleteDocumentsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteDocumentsWithResponse indicates an expected call of DeleteDocumentsWithResponse
func (mr *MockClientWithResponsesInterfaceMockRecorder) DeleteDocumentsWithResponse(ctx, collectionName, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDocumentsWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).DeleteDocumentsWithResponse), ctx, collectionName, params)
}

// IndexDocumentWithBodyWithResponse mocks base method
func (m *MockClientWithResponsesInterface) IndexDocumentWithBodyWithResponse(ctx context.Context, collectionName string, params *api.IndexDocumentParams, contentType string, body io.Reader) (*api.IndexDocumentResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IndexDocumentWithBodyWithResponse", ctx, collectionName, params, contentType, body)
	ret0, _ := ret[0].(*api.IndexDocumentResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IndexDocumentWithBodyWithResponse indicates an expected call of IndexDocumentWithBodyWithResponse
func (mr *MockClientWithResponsesInterfaceMockRecorder) IndexDocumentWithBodyWithResponse(ctx, collectionName, params, contentType, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IndexDocumentWithBodyWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).IndexDocumentWithBodyWithResponse), ctx, collectionName, params, contentType, body)
}

// IndexDocumentWithResponse mocks base method
func (m *MockClientWithResponsesInterface) IndexDocumentWithResponse(ctx context.Context, collectionName string, params *api.IndexDocumentParams, body api.IndexDocumentJSONRequestBody) (*api.IndexDocumentResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IndexDocumentWithResponse", ctx, collectionName, params, body)
	ret0, _ := ret[0].(*api.IndexDocumentResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IndexDocumentWithResponse indicates an expected call of IndexDocumentWithResponse
func (mr *MockClientWithResponsesInterfaceMockRecorder) IndexDocumentWithResponse(ctx, collectionName, params, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IndexDocumentWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).IndexDocumentWithResponse), ctx, collectionName, params, body)
}

// ExportCollectionWithResponse mocks base method
func (m *MockClientWithResponsesInterface) ExportCollectionWithResponse(ctx context.Context, collectionName string) (*api.ExportCollectionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExportCollectionWithResponse", ctx, collectionName)
	ret0, _ := ret[0].(*api.ExportCollectionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExportCollectionWithResponse indicates an expected call of ExportCollectionWithResponse
func (mr *MockClientWithResponsesInterfaceMockRecorder) ExportCollectionWithResponse(ctx, collectionName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExportCollectionWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).ExportCollectionWithResponse), ctx, collectionName)
}

// ImportCollectionWithBodyWithResponse mocks base method
func (m *MockClientWithResponsesInterface) ImportCollectionWithBodyWithResponse(ctx context.Context, collectionName string, params *api.ImportCollectionParams, contentType string, body io.Reader) (*api.ImportCollectionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ImportCollectionWithBodyWithResponse", ctx, collectionName, params, contentType, body)
	ret0, _ := ret[0].(*api.ImportCollectionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ImportCollectionWithBodyWithResponse indicates an expected call of ImportCollectionWithBodyWithResponse
func (mr *MockClientWithResponsesInterfaceMockRecorder) ImportCollectionWithBodyWithResponse(ctx, collectionName, params, contentType, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImportCollectionWithBodyWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).ImportCollectionWithBodyWithResponse), ctx, collectionName, params, contentType, body)
}

// SearchCollectionWithResponse mocks base method
func (m *MockClientWithResponsesInterface) SearchCollectionWithResponse(ctx context.Context, collectionName string, params *api.SearchCollectionParams) (*api.SearchCollectionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchCollectionWithResponse", ctx, collectionName, params)
	ret0, _ := ret[0].(*api.SearchCollectionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchCollectionWithResponse indicates an expected call of SearchCollectionWithResponse
func (mr *MockClientWithResponsesInterfaceMockRecorder) SearchCollectionWithResponse(ctx, collectionName, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchCollectionWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).SearchCollectionWithResponse), ctx, collectionName, params)
}

// DeleteDocumentWithResponse mocks base method
func (m *MockClientWithResponsesInterface) DeleteDocumentWithResponse(ctx context.Context, collectionName, documentId string) (*api.DeleteDocumentResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDocumentWithResponse", ctx, collectionName, documentId)
	ret0, _ := ret[0].(*api.DeleteDocumentResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteDocumentWithResponse indicates an expected call of DeleteDocumentWithResponse
func (mr *MockClientWithResponsesInterfaceMockRecorder) DeleteDocumentWithResponse(ctx, collectionName, documentId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDocumentWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).DeleteDocumentWithResponse), ctx, collectionName, documentId)
}

// GetDocumentWithResponse mocks base method
func (m *MockClientWithResponsesInterface) GetDocumentWithResponse(ctx context.Context, collectionName, documentId string) (*api.GetDocumentResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDocumentWithResponse", ctx, collectionName, documentId)
	ret0, _ := ret[0].(*api.GetDocumentResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDocumentWithResponse indicates an expected call of GetDocumentWithResponse
func (mr *MockClientWithResponsesInterfaceMockRecorder) GetDocumentWithResponse(ctx, collectionName, documentId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDocumentWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).GetDocumentWithResponse), ctx, collectionName, documentId)
}

// UpdateDocumentWithBodyWithResponse mocks base method
func (m *MockClientWithResponsesInterface) UpdateDocumentWithBodyWithResponse(ctx context.Context, collectionName, documentId, contentType string, body io.Reader) (*api.UpdateDocumentResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDocumentWithBodyWithResponse", ctx, collectionName, documentId, contentType, body)
	ret0, _ := ret[0].(*api.UpdateDocumentResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateDocumentWithBodyWithResponse indicates an expected call of UpdateDocumentWithBodyWithResponse
func (mr *MockClientWithResponsesInterfaceMockRecorder) UpdateDocumentWithBodyWithResponse(ctx, collectionName, documentId, contentType, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDocumentWithBodyWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).UpdateDocumentWithBodyWithResponse), ctx, collectionName, documentId, contentType, body)
}

// UpdateDocumentWithResponse mocks base method
func (m *MockClientWithResponsesInterface) UpdateDocumentWithResponse(ctx context.Context, collectionName, documentId string, body api.UpdateDocumentJSONRequestBody) (*api.UpdateDocumentResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDocumentWithResponse", ctx, collectionName, documentId, body)
	ret0, _ := ret[0].(*api.UpdateDocumentResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateDocumentWithResponse indicates an expected call of UpdateDocumentWithResponse
func (mr *MockClientWithResponsesInterfaceMockRecorder) UpdateDocumentWithResponse(ctx, collectionName, documentId, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDocumentWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).UpdateDocumentWithResponse), ctx, collectionName, documentId, body)
}

// DeleteSearchOverrideWithResponse mocks base method
func (m *MockClientWithResponsesInterface) DeleteSearchOverrideWithResponse(ctx context.Context, collectionName, overrideId string) (*api.DeleteSearchOverrideResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSearchOverrideWithResponse", ctx, collectionName, overrideId)
	ret0, _ := ret[0].(*api.DeleteSearchOverrideResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSearchOverrideWithResponse indicates an expected call of DeleteSearchOverrideWithResponse
func (mr *MockClientWithResponsesInterfaceMockRecorder) DeleteSearchOverrideWithResponse(ctx, collectionName, overrideId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSearchOverrideWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).DeleteSearchOverrideWithResponse), ctx, collectionName, overrideId)
}

// UpsertSearchOverrideWithBodyWithResponse mocks base method
func (m *MockClientWithResponsesInterface) UpsertSearchOverrideWithBodyWithResponse(ctx context.Context, collectionName, overrideId, contentType string, body io.Reader) (*api.UpsertSearchOverrideResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertSearchOverrideWithBodyWithResponse", ctx, collectionName, overrideId, contentType, body)
	ret0, _ := ret[0].(*api.UpsertSearchOverrideResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpsertSearchOverrideWithBodyWithResponse indicates an expected call of UpsertSearchOverrideWithBodyWithResponse
func (mr *MockClientWithResponsesInterfaceMockRecorder) UpsertSearchOverrideWithBodyWithResponse(ctx, collectionName, overrideId, contentType, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertSearchOverrideWithBodyWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).UpsertSearchOverrideWithBodyWithResponse), ctx, collectionName, overrideId, contentType, body)
}

// UpsertSearchOverrideWithResponse mocks base method
func (m *MockClientWithResponsesInterface) UpsertSearchOverrideWithResponse(ctx context.Context, collectionName, overrideId string, body api.UpsertSearchOverrideJSONRequestBody) (*api.UpsertSearchOverrideResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertSearchOverrideWithResponse", ctx, collectionName, overrideId, body)
	ret0, _ := ret[0].(*api.UpsertSearchOverrideResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpsertSearchOverrideWithResponse indicates an expected call of UpsertSearchOverrideWithResponse
func (mr *MockClientWithResponsesInterfaceMockRecorder) UpsertSearchOverrideWithResponse(ctx, collectionName, overrideId, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertSearchOverrideWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).UpsertSearchOverrideWithResponse), ctx, collectionName, overrideId, body)
}

// DebugWithResponse mocks base method
func (m *MockClientWithResponsesInterface) DebugWithResponse(ctx context.Context) (*api.DebugResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DebugWithResponse", ctx)
	ret0, _ := ret[0].(*api.DebugResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DebugWithResponse indicates an expected call of DebugWithResponse
func (mr *MockClientWithResponsesInterfaceMockRecorder) DebugWithResponse(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DebugWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).DebugWithResponse), ctx)
}

// HealthWithResponse mocks base method
func (m *MockClientWithResponsesInterface) HealthWithResponse(ctx context.Context) (*api.HealthResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HealthWithResponse", ctx)
	ret0, _ := ret[0].(*api.HealthResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HealthWithResponse indicates an expected call of HealthWithResponse
func (mr *MockClientWithResponsesInterfaceMockRecorder) HealthWithResponse(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HealthWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).HealthWithResponse), ctx)
}

// ListKeysWithResponse mocks base method
func (m *MockClientWithResponsesInterface) ListKeysWithResponse(ctx context.Context) (*api.ListKeysResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListKeysWithResponse", ctx)
	ret0, _ := ret[0].(*api.ListKeysResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListKeysWithResponse indicates an expected call of ListKeysWithResponse
func (mr *MockClientWithResponsesInterfaceMockRecorder) ListKeysWithResponse(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListKeysWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).ListKeysWithResponse), ctx)
}

// CreateKeyWithBodyWithResponse mocks base method
func (m *MockClientWithResponsesInterface) CreateKeyWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*api.CreateKeyResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateKeyWithBodyWithResponse", ctx, contentType, body)
	ret0, _ := ret[0].(*api.CreateKeyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateKeyWithBodyWithResponse indicates an expected call of CreateKeyWithBodyWithResponse
func (mr *MockClientWithResponsesInterfaceMockRecorder) CreateKeyWithBodyWithResponse(ctx, contentType, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateKeyWithBodyWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).CreateKeyWithBodyWithResponse), ctx, contentType, body)
}

// CreateKeyWithResponse mocks base method
func (m *MockClientWithResponsesInterface) CreateKeyWithResponse(ctx context.Context, body api.CreateKeyJSONRequestBody) (*api.CreateKeyResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateKeyWithResponse", ctx, body)
	ret0, _ := ret[0].(*api.CreateKeyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateKeyWithResponse indicates an expected call of CreateKeyWithResponse
func (mr *MockClientWithResponsesInterfaceMockRecorder) CreateKeyWithResponse(ctx, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateKeyWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).CreateKeyWithResponse), ctx, body)
}

// DeleteKeyWithResponse mocks base method
func (m *MockClientWithResponsesInterface) DeleteKeyWithResponse(ctx context.Context, keyId string) (*api.DeleteKeyResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteKeyWithResponse", ctx, keyId)
	ret0, _ := ret[0].(*api.DeleteKeyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteKeyWithResponse indicates an expected call of DeleteKeyWithResponse
func (mr *MockClientWithResponsesInterfaceMockRecorder) DeleteKeyWithResponse(ctx, keyId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteKeyWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).DeleteKeyWithResponse), ctx, keyId)
}

// GetKeyWithResponse mocks base method
func (m *MockClientWithResponsesInterface) GetKeyWithResponse(ctx context.Context, keyId string) (*api.GetKeyResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetKeyWithResponse", ctx, keyId)
	ret0, _ := ret[0].(*api.GetKeyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetKeyWithResponse indicates an expected call of GetKeyWithResponse
func (mr *MockClientWithResponsesInterfaceMockRecorder) GetKeyWithResponse(ctx, keyId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKeyWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).GetKeyWithResponse), ctx, keyId)
}
